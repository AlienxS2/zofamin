[
    {
        "question": "Что такое условные выражения (conditional expressions) в Python?",
        "answer": "Условные выражения (conditional expressions) в Python - это выражения, которые позволяют выполнять различные действия на основе условия. Они позволяют программе принимать решения и выбирать между разными вариантами выполнения кода в зависимости от истинности или ложности условия. В Python условные выражения реализуются с помощью ключевых слов `if`, `elif` (сокращение от 'else if') и `else`. Например:\n\nx = 10\n\nif x > 0:\n    print('Число положительное')\nelif x < 0:\n    print('Число отрицательное')\nelse:\n    print('Число равно нулю')"
    },
    {
        "question": "Какие операторы сравнения можно использовать в условных конструкциях в Python?",
        "answer": "В условных конструкциях в Python можно использовать следующие операторы сравнения:\n- > (больше);\n- >= (больше или равно);\n- < (меньше);\n- <= (меньше или равно);\n- == (равно);\n- != (не равно)."
    },
    {
        "question": "Какие логические операции можно использовать для составления сложных условий в Python?",
        "answer": "Для составления сложных условий в Python можно использовать следующие логические операции:\n- and (логическое 'И') для двух условий;\n- or (логическое 'ИЛИ') для двух условий;\n- not (логическое 'НЕ') для одного условия."
    },
    {
        "question": "Какие значения возвращает логическая операция 'and'?",
        "answer": "Логическая операция 'and' возвращает True, если оба условия истинны, иначе возвращает False."
    },
    {
        "question": "Какие значения возвращает логическая операция 'or'?",
        "answer": "Логическая операция 'or' возвращает False, если оба условия ложны, иначе возвращает True."
    },
    {
        "question": "Какое значение возвращает логическая операция 'not'?",
        "answer": "Логическая операция 'not' возвращает False для истинного условия, и наоборот."
    },
    {
        "question": "Какие операторы можно использовать для сравнения строк в Python?",
        "answer": "Для сравнения строк в Python можно использовать операторы >, <, >=, <=, == и !=. Например:\n\nstring1 = 'abc'\nstring2 = 'def'\n\nif string1 < string2:\n    print('string1 меньше string2')\nelse:\n    print('string1 больше или равно string2')\n\nВывод: 'string1 меньше string2'"
    },
    {
        "question": "Какие операторы можно использовать для сравнения чисел в Python?",
        "answer": "Для сравнения чисел в Python можно использовать операторы >, <, >=, <=, == и !=. Например:\n\nx = 5\ny = 10\n\nif x > y:\n    print('x больше y')\nelif x < y:\n    print('x меньше y')\nelse:\n    print('x равно y')\n\nВывод: 'x меньше y'"
    },
    {
        "question": "Какие операторы можно использовать для сравнения символов в Python?",
        "answer": "Для сравнения символов в Python можно использовать операторы >, <, >=, <=, == и !=. Сравнение символов происходит по их кодам в таблице кодировки. Например:\n\nchar1 = 'a'\nchar2 = 'b'\n\nif char1 < char2:\n    print('char1 меньше char2')\nelse:\n    print('char1 больше или равно char2')\n\nВывод: 'char1 меньше char2'"
    },
    {
        "question": "Как получить код символа в таблице кодировки в Python?",
        "answer": "Для получения кода символа в таблице кодировки в Python можно использовать встроенную функцию ord(). Например:\n\nchar = 'a'\ncode = ord(char)\nprint(code)\n\nВывод: 97"
    },
    {
        "question": "Как получить символ по его коду в таблице кодировки в Python?",
        "answer": "Для получения символа по его коду в таблице кодировки в Python можно использовать встроенную функцию chr(). Например:\n\ncode = 97\nchar = chr(code)\nprint(char)\n\nВывод: 'a'"
    },
    {
        "question": "Как проверить наличие подстроки в строке в Python?",
        "answer": "Для проверки наличия подстроки в строке в Python можно использовать оператор in. Например:\n\ntext = 'Пример текста'\nif 'пример' in text:\n    print('Подстрока найдена')\nelse:\n    print('Подстрока не найдена')\n\nВывод: 'Подстрока найдена'"
    },
    {
        "question": "Как использовать оператор match в Python 3.10?",
        "answer": "В Python 3.10 появился оператор match, который позволяет сравнивать значение выражения с заранее заданными в операторах case. Например:\n\ncolor = 'красный'\nmatch color:\n    case 'красный' | 'жёлтый':\n        print('Стоп.')\n    case 'зелёный':\n        print('Можно ехать.')\n    case _:\n        print('Некорректное значение.')\n\nВывод: 'Стоп.'"
    },
    {
        "question": "Как определить длину строки в Python?",
        "answer": "Для определения длины строки в Python можно использовать встроенную функцию len(). Например:\n\nstring = 'Пример строки'\nlength = len(string)\nprint(length)\n\nВывод: 14"
    },
    {
        "question": "Как найти максимальное и минимальное значение из нескольких в Python?",
        "answer": "Для нахождения максимального и минимального значения из нескольких в Python можно использовать встроенные функции max() и min(). Например:\n\nnumbers = [5, 2, 8, 1, 9]\nmax_value = max(numbers)\nmin_value = min(numbers)\nprint(max_value)\nprint(min_value)\n\nВывод: 9, 1"
    },
    {
        "question": "Как найти модуль числа в Python?",
        "answer": "Для нахождения модуля числа в Python можно использовать встроенную функцию abs(). Например:\n\nnumber = -5\nabsolute_value = abs(number)\nprint(absolute_value)\n\nВывод: 5"
    }
]
