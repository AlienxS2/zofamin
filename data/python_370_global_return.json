[
    {
        "question": "Что означает ключевое слово 'return' в Python?",
        "answer": "Ключевое слово 'return' в Python используется в функциях для возврата значения из функции. Оно указывает на то, что функция завершается и возвращает определенное значение. Вот пример использования ключевого слова 'return' в функции:\n\n```python\ndef add(value1, value2):\n    return value1 + value2\n\nresult = add(3, 5)\nprint(result)\n# Вывод: 8\n```"
    },
    {
        "question": "Как использовать глобальные переменные в Python?",
        "answer": "Глобальные переменные в Python могут быть использованы внутри функций, а также извне области видимости функции. Для использования глобальной переменной внутри функции, необходимо объявить ее как глобальную с помощью ключевого слова 'global'. Вот пример использования глобальной переменной в функции:\n\n```python\nresult = 0\n\ndef add(value1, value2):\n    global result\n    result = value1 + value2\n\nadd(3, 5)\nprint(result)\n# Вывод: 8\n```"
    },
    {
        "question": "Почему не рекомендуется использовать глобальные переменные в Python?",
        "answer": "Использование глобальных переменных в Python не рекомендуется по нескольким причинам:\n\n1. Глобальные переменные усложняют понимание и отслеживание потока данных в программе, особенно в больших проектах.\n\n2. Они могут быть изменены из любой части программы, что делает код менее предсказуемым и подверженным ошибкам.\n\n3. Глобальные переменные могут создавать конфликты имён, особенно если в программе используется много модулей или функций.\n\n4. Использование глобальных переменных затрудняет тестирование и отладку кода.\n\nВместо использования глобальных переменных, рекомендуется передавать значения через параметры функций и возвращать результаты с помощью ключевого слова 'return'."
    },
    {
        "question": "Как вернуть несколько значений из функции в Python?",
        "answer": "В Python можно вернуть несколько значений из функции, используя кортеж или список. Вот примеры:\n\n1. Возврат кортежа:\n\n```python\n\ndef get_name_and_age():\n    name = 'Danny'\n    age = 30\n    return name, age\n\nresult = get_name_and_age()\nprint(result)\n# Вывод: ('Danny', 30)\n```"
    },
    {
        "question": "Какой метод не рекомендуется использовать для возврата нескольких значений из функции?",
        "answer": "Не рекомендуется использовать глобальные переменные для возврата нескольких значений из функции. Это усложняет код и захламляет глобальную область видимости. Вместо этого, рекомендуется использовать кортеж, список или словарь для возврата нескольких значений. Пример кода на Python, использующий возврат кортежа:",
        "code": "def profile():\n    name = 'Danny'\n    age = 30\n    return (name, age)\n\nprofile_data = profile()\nprint(profile_data[0])\n# Вывод: Danny\n\nprint(profile_data[1])\n# Вывод: 30"
    },
    {
        "question": "Как можно использовать namedtuple для возврата нескольких значений из функции?",
        "answer": "Можно использовать namedtuple для возврата нескольких значений из функции. Namedtuple предоставляет именованный доступ к элементам кортежа. Пример кода на Python, использующий namedtuple:",
        "code": "from collections import namedtuple\n\ndef profile():\n    Person = namedtuple('Person', 'name age')\n    return Person(name='Danny', age=31)\n\np = profile()\nprint(p, type(p))\n# Вывод: Person(name='Danny', age=31) <class '__main__.Person'>\nprint(p.name)\n# Вывод: Danny\nprint(p.age)\n# Вывод: 31"
    },
    {
        "question": "Как можно распаковать значения, возвращаемые из функции, в отдельные переменные?",
        "answer": "Значения, возвращаемые из функции, можно распаковать в отдельные переменные. Это называется немедленной распаковкой. Пример кода на Python, демонстрирующий немедленную распаковку:",
        "code": "name, age = profile()\nprint(name)\n# Вывод: Danny\nprint(age)\n# Вывод: 31"
    }
]
    
