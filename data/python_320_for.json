[
    {
        "question": "Что такое циклы `for` (for loops) в Python?",
        "answer": "Циклы `for` (for loops) в Python позволяют выполнять определенный блок кода для каждого элемента в итерируемом объекте, таком как список, строка или диапазон чисел. В каждой итерации цикла переменная принимает значение следующего элемента, и код внутри цикла выполняется. Цикл `for` предоставляет удобный способ обрабатывать элементы коллекций или выполнять определенные действия заданное количество раз. Например:\n\nfruits = ['apple', 'banana', 'cherry']\n\nfor fruit in fruits:\n    print(fruit)"
    },
    {
        "question": "Какая базовая структура цикла for в Python?",
        "answer": "Базовая структура цикла for в Python выглядит следующим образом:\n\nfruits = ['apple', 'banana', 'mango']\nfor fruit in fruits:\n    print(fruit.capitalize())\n\n# Вывод: Apple\n#        Banana\n#        Mango"
    },
    {
        "question": "Что такое блок else в цикле for и когда он выполняется?",
        "answer": "Блок else в цикле for выполняется, когда цикл завершается в нормальном режиме, то есть не был вызван break. Этот блок представляет собой удобную особенность, которая позволяет определить, что цикл завершился без прерывания. Он может быть использован для выполнения определенных действий, когда ничего не было найдено или когда цикл завершился полностью. Вот пример использования блока else в цикле for:\n\nfor item in container:\n    if search_something(item):\n        # Нашли!\n        process(item)\n        break\nelse:\n    # Ничего не найдено...\n    not_found_in_container()"
    },
    {
        "question": "Как можно использовать блок else в цикле for для отслеживания простых чисел?",
        "answer": "Блок else в цикле for можно использовать для отслеживания простых чисел. В примере из статьи, цикл проверяет числа от 2 до 10 и ищет их целочисленные делители. Если делитель найден, цикл прерывается с помощью break. Если делитель не найден, то есть цикл завершается полностью, блок else выполняется. В этом блоке можно выполнять действия, связанные с простыми числами. Вот пример использования блока else для отслеживания простых чисел:\n\nfor n in range(2, 10):\n    for x in range(2, n):\n        if n % x == 0:\n            print(n, 'equals', x, '*', n/x)\n            break\n    else:\n        # Цикл не нашел целочисленного делителя для n\n        print(n, 'is a prime number')"
    }
]
