[
{
"date": "14.06.2023",
"question": "Какие кавычки можно использовать для определения строк в Python?",
"answer": "Строки в Python можно определять как с помощью одинарных кавычек (''), так и с помощью двойных кавычек ("").\nНапример:\nmy_string = 'Привет, мир!'\nили\nmy_string = "Привет, мир!"",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как вывести строку на экран с помощью функции print()?",
"answer": "Чтобы вывести строку на экран с помощью функции print(), необходимо передать эту строку в качестве аргумента функции.\nНапример:\nprint('Привет, мир!')\nили\nprint("Привет, мир!")",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как присвоить строку переменной в Python?",
"answer": "Для присвоения строки переменной в Python необходимо использовать оператор присваивания (=).\nНапример:\nmy_string = 'Привет, мир!'\nили\nmy_string = "Привет, мир!"",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как создать многострочную строку в Python?",
"answer": "Для создания многострочной строки в Python можно использовать тройные кавычки (три пары одинарных или двойных кавычек).\nНапример:\na = '''Это\nмногострочная\nстрока.'''\nили\na = """Это\nмногострочная\nстрока."""",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как получить символ строки по его индексу в Python?",
"answer": "В Python можно получить символ строки, обратившись к нему по индексу с помощью квадратных скобок ([]).\nНапример:\nmy_string = 'Hello'\nprint(my_string[1]) # Выводит символ 'e'\n\nОбратите внимание, что индексация начинается с 0, поэтому первый символ имеет индекс 0.",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как перебрать все символы строки в Python?",
"answer": "Поскольку строки в Python являются массивами, можно использовать цикл for для перебора всех символов в строке.\nНапример:\nmy_string = 'banana'\nfor x in my_string:\n print(x)\n\nЭтот код выведет каждый символ строки 'banana' на отдельной строке.",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как узнать длину строки в Python?",
"answer": "Для получения длины строки в Python используется функция len().\nНапример:\nmy_string = 'Hello, World!'\nprint(len(my_string)) # Выводит 13",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как проверить, присутствует ли определенная фраза или символ в строке?",
"answer": "Для проверки наличия определенной фразы или символа в строке в Python используется ключевое слово in.\nНапример:\nmy_string = 'The best things in life are free!'\nprint('free' in my_string) # Выводит True",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как проверить, отсутствует ли определенная фраза или символ в строке?",
"answer": "Для проверки отсутствия определенной фразы или символа в строке в Python используется ключевое слово not in.\nНапример:\nmy_string = 'The best things in life are free!'\nprint('expensive' not in my_string) # Выводит True",
"difficulty": "1",
"memory": "0"
},
[
{
"date": "14.06.2023",
"question": "Как получить диапазон символов из строки с помощью среза в Python?",
"answer": "Для получения диапазона символов из строки в Python используется синтаксис среза.\nНеобходимо указать индекс начала и индекс конца, разделенные двоеточием, чтобы получить часть строки.\nНапример:\nmy_string = 'Hello, World!'\nprint(my_string[2:5]) # Выводит 'llo'",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как получить символы строки с начала до определенной позиции с помощью среза в Python?",
"answer": "Если вы хотите получить символы строки с начала до определенной позиции, можно пропустить указание индекса начала в срезе.\nНапример:\nmy_string = 'Hello, World!'\nprint(my_string[:5]) # Выводит 'Hello'",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как получить символы строки от определенной позиции до конца с помощью среза в Python?",
"answer": "Если вы хотите получить символы строки от определенной позиции до конца, можно пропустить указание индекса конца в срезе.\nНапример:\nmy_string = 'Hello, World!'\nprint(my_string[2:]) # Выводит 'llo, World!'",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как использовать отрицательные индексы для среза строки в Python?",
"answer": "Для начала среза с конца строки в Python можно использовать отрицательные индексы.\nНапример:\nmy_string = 'Hello, World!'\nprint(my_string[-5:-2]) # Выводит 'orl'",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как преобразовать строку в верхний регистр в Python?",
"answer": "В Python есть метод upper(), который возвращает строку в верхнем регистре.\nНапример:\nmy_string = 'Hello, World!'\nprint(my_string.upper()) # Выводит 'HELLO, WORLD!'",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как преобразовать строку в нижний регистр в Python?",
"answer": "В Python есть метод lower(), который возвращает строку в нижнем регистре.\nНапример:\nmy_string = 'Hello, World!'\nprint(my_string.lower()) # Выводит 'hello, world!'",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как удалить пробельные символы в начале и конце строки в Python?",
"answer": "Пробельные символы в начале и конце строки можно удалить с помощью метода strip().\nНапример:\nmy_string = ' Hello, World! '\nprint(my_string.strip()) # Выводит 'Hello, World!'",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как заменить одну строку другой в Python?",
"answer": "Для замены одной строки другой в Python используется метод replace().\nНапример:\nmy_string = 'Hello, World!'\nprint(my_string.replace('H', 'J')) # Выводит 'Jello, World!'",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как разделить строку на подстроки в Python?",
"answer": "Метод split() в Python разделяет строку на подстроки, используя указанный разделитель, и возвращает список подстрок.\nНапример:\nmy_string = 'Hello, World!'\nprint(my_string.split(',')) # Выводит ['Hello', ' World!']",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как объединить (сконкатенировать) две строки в Python?",
"answer": "Для объединения (сконкатенирования) двух строк в Python можно использовать оператор +.\nНапример:\na = 'Hello'\nb = 'World'\nc = a + b\nprint(c) # Выводит 'HelloWorld'",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как объединить (сконкатенировать) две строки в Python с добавлением пробела между ними?",
"answer": "Чтобы добавить пробел между двумя объединенными строками в Python, нужно добавить ' ' (пробел) в выражение.\nНапример:\na = 'Hello'\nb = 'World'\nc = a + ' ' + b\nprint(c) # Выводит 'Hello World'",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как объединить строку и число в Python?",
"answer": "В Python можно объединить строку и число с помощью метода format().\nНапример:\nage = 36\ntxt = 'My name is John, I am {}'.format(age)\nprint(txt)",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как использовать метод format() для вставки чисел в строки в Python?",
"answer": "Метод format() в Python позволяет вставлять числа в строки с использованием заполнителей {}.\nНапример:\nage = 36\ntxt = 'My name is John, and I am {}'.format(age)\nprint(txt)",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как использовать метод format() с несколькими аргументами в Python?",
"answer": "Метод format() в Python принимает неограниченное количество аргументов и размещает их в соответствующих заполнителях.\nНапример:\nquantity = 3\nitemno = 567\nprice = 49.95\nmyorder = 'I want {} pieces of item {} for {} dollars.'\nprint(myorder.format(quantity, itemno, price))",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как использовать индексы при использовании метода format() в Python?",
"answer": "Для уверенного размещения аргументов в правильных заполнителях можно использовать индексы {0}.\nНапример:\nquantity = 3\nitemno = 567\nprice = 49.95\nmyorder = 'I want to pay {2} dollars for {0} pieces of item {1}.'\nprint(myorder.format(quantity, itemno, price))",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Что такое экранирование символов (escape characters) в Python?",
"answer": "Экранирование символов (escape characters) в Python позволяет вставлять в строку символы, которые являются недопустимыми без использования специальных обозначений.\nНапример:\ntxt = 'We are the so-called "Vikings" from the north.'\n\nЧтобы использовать двойные кавычки внутри строки, нужно использовать экранирующий символ \:\ntxt = 'We are the so-called \"Vikings\" from the north.'",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Какие символы являются экранирующими символами в Python?",
"answer": "В Python используются следующие экранирующие символы:\n- ': экранирование одинарной кавычки\n- \: экранирование обратного слеша\n- \n: новая строка\n- \r: возврат каретки\n- \t: табуляция\n- \b: возврат на одну позицию\n- \f: перевод страницы\n- \ooo: восьмеричное значение\n- \xhh: шестнадцатеричное значение",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Что делает метод casefold() в Python?",
"answer": "Метод casefold() в Python возвращает строку, в которой все символы приведены к нижнему регистру. Этот метод является более агрессивным по сравнению с методом lower(), поскольку он преобразует больше символов в нижний регистр и находит больше совпадений при сравнении двух строк, если обе преобразованы с использованием метода casefold().\n\nПример использования:\n\ntxt = "Hello, And Welcome To My World!"\nx = txt.casefold()\nprint(x) # hello, and welcome to my world!",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "В чем отличие метода casefold() от метода lower() в Python?",
"answer": "Метод casefold() и метод lower() в Python выполняют преобразование всех символов строки в нижний регистр. Однако метод casefold() является более агрессивным, так как он преобразует больше символов в нижний регистр, чем метод lower(). Это позволяет casefold() находить больше совпадений при сравнении строк. Например, при сравнении строк, если обе строки приведены к нижнему регистру с использованием метода casefold(), то будет найдено больше совпадений, чем при использовании метода lower().\n\nПример использования метода casefold():\n\ntxt = "Hello, And Welcome To My World!"\nx = txt.casefold()\nprint(x) # hello, and welcome to my world!\n\nПример использования метода lower():\n\ntxt = "Hello, And Welcome To My World!"\nx = txt.lower()\nprint(x) # hello, and welcome to my world!",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Какие методы в Python можно использовать для преобразования строки к нижнему регистру?",
"answer": "В Python существует несколько методов, которые можно использовать для преобразования строки к нижнему регистру. Некоторые из них:\n\n1. Метод casefold(): Этот метод является более агрессивным по сравнению с методом lower(). Он преобразует больше символов в нижний регистр и находит больше совпадений при сравнении строк.\n\n2. Метод lower(): Этот метод преобразует все символы строки в нижний регистр. Он является менее агрессивным по сравнению с методом casefold().\n\n3. Метод swapcase(): Этот метод меняет регистр каждого символа строки на противоположный. То есть символы в верхнем регистре становятся в нижнем, а символы в нижнем регистре - в верхнем.\n\nПримеры использования:\n\ntxt = "Hello, And Welcome To My World!"\n\n# Используя casefold()\nx = txt.casefold()\nprint(x) # hello, and welcome to my world!\n\n# Используя lower()\nx = txt.lower()\nprint(x) # hello, and welcome to my world!\n\n# Используя swapcase()\nx = txt.swapcase()\nprint(x) # hELLO, aND wELCOME tO mY wORLD!",
"difficulty": "2",
"memory": "0"
},

{
"date": "14.06.2023",
"question": "Какие особенности имеют строки в Python?",
"answer": "Строки в Python являются 'неизменяемыми', что означает, что они не могут быть изменены после создания. Строки в Python могут быть заключены в двойные или одинарные кавычки. Обратные слеши используются для экранирования символов внутри строковых литералов. Строковой литерал в двойных кавычках может содержать одинарные кавычки, а строковой литерал в одинарных кавычках может содержать двойные кавычки. Строковой литерал может занимать несколько строк, но в конце каждой строки должен быть обратный слеш для экранирования переноса строки. Строковые литералы в тройных кавычках могут занимать несколько строк текста.",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как получить доступ к символам строки в Python? Какой индексации используется?",
"answer": "Символы строки в Python можно получить с помощью стандартного синтаксиса [ ]. Индексация в Python начинается с 0, поэтому если s - это строка 'hello', то s[1] вернет символ 'e'. Если индекс выходит за границы строки, Python выдаст ошибку. Оператор среза также работает для извлечения подстроки из строки. Функция len(string) возвращает длину строки. Синтаксис [ ] и функция len() работают для любого типа последовательности - строк, списков и т. д. В Python оператор + используется для конкатенации двух строк.",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Что такое методы строк в Python? Приведи примеры некоторых распространенных методов.",
"answer": "Методы строк в Python - это функции, которые работают на строковом объекте. Некоторые распространенные методы строк в Python включают: lower() - возвращает строку в нижнем регистре, upper() - возвращает строку в верхнем регистре, strip() - удаляет пробелы в начале и конце строки, isalpha() - проверяет, состоят ли все символы строки из букв, isdigit() - проверяет, состоят ли все символы строки из цифр, startswith('other') - проверяет, начинается ли строка с заданной подстроки, endswith('other') - проверяет, заканчивается ли строка заданной подстрокой, find('other') - ищет заданную подстроку в строке и возвращает ее индекс, replace('old', 'new') - заменяет все вхождения одной подстроки на другую, split('delim') - разделяет строку на подстроки по заданному разделителю и возвращает список подстрок, join(list) - объединяет элементы списка в строку, используя заданный разделитель.",
"difficulty": "3",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как работает срез строк в Python? Приведи примеры.",
"answer": "Синтаксис среза (slice) является удобным способом обращения к подчастям последовательностей, таких как строки и списки, в Python. Срез s[start:end] возвращает элементы, начиная с индекса start и до, но не включая индекс end. Например, если s = 'Hello', то s[1:4] вернет 'ell' - символы, начиная с индекса 1 и до, но не включая индекс 4. Если опустить один из индексов, он будет заменен началом или концом строки. Например, s[1:] вернет 'ello' - строки, начиная с индекса 1 и до конца строки. s[:] вернет копию всей строки. s[1:100] вернет 'ello' - индекс, который выходит за границы строки, будет усечен до длины строки. В Python можно использовать отрицательные индексы для доступа к символам с конца строки: s[-1] - последний символ, s[-2] - предпоследний символ и так далее. Срезы также работают с списками.",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как в Python осуществляется преобразование объектов в строки для вывода на печать?",
"answer": "В Python есть два встроенных способа автоматического преобразования объектов в строку для вывода на печать: 'formatted string literals' или 'f-strings' и метод str.format(). Форматированные строковые литералы позволяют вставлять значения переменных прямо в строку с использованием фигурных скобок и префикса 'f'. Например, name = 'Alice' и print(f'Hello, {name}!') выведет 'Hello, Alice!'. Метод str.format() позволяет вставлять значения переменных в строку с помощью фигурных скобок и вызова метода format(). Например, print('Hello, {}!'.format(name)) также выведет 'Hello, Alice!'. Оба подхода позволяют удобно форматировать строки, вставлять значения переменных и выполнять другие операции для создания строкового вывода.",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Что такое formatted string literals в Python?",
"answer": "Formatted string literals (f-strings) в Python - это способ создания строк, позволяющий вставлять значения переменных и выражений внутрь строки с помощью фигурных скобок {}. Форматирование значений осуществляется с использованием спецификации формата, которая определяет, как значения должны быть представлены в строке. Форматированные строки начинаются с префикса 'f' перед открывающей кавычкой и могут содержать выражения внутри фигурных скобок.",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как создать formatted string literal (f-string) в Python?",
"answer": "Для создания formatted string literal (f-string) в Python нужно использовать префикс 'f' перед открывающей кавычкой строки. Затем внутри строки можно использовать фигурные скобки {} для вставки значений переменных и выражений. Например: \n\nvalue = 2.791514\nprint(f'approximate value = {value:.2f}') # approximate value = 2.79\n\nЗдесь значение переменной 'value' вставляется в строку с использованием форматирования ':.2f', которое означает, что значение должно быть представлено с двумя знаками после запятой.",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как использовать formatted string literals для выравнивания столбцов в таблице?",
"answer": "Formatted string literals (f-strings) в Python очень полезны при создании таблиц, где требуется выравнивание столбцов. Для этого можно использовать спецификацию формата внутри фигурных скобок {}. Например: \n\naddress_book = [{'name':'N.X.', 'addr':'15 Jones St', 'bonus': 70},\n{'name':'J.P.', 'addr':'1005 5th St', 'bonus': 400},\n{'name':'A.A.', 'addr':'200001 Bdwy', 'bonus': 5},]\n\nfor person in address_book:\n print(f'{person["name"]:8} || {person["addr"]:20} || {person["bonus"]:>5}')\n\nВ этом примере значения атрибутов объектов вставляются в строки таблицы с использованием форматирования. Спецификации ':8', ':20' и ':>5' определяют ширину столбцов и выравнивание значений в них.",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как использовать оператор % для создания строк в Python?",
"answer": "В Python существует старый метод создания строк, аналогичный функциональности printf() в других языках. Оператор % принимает строку формата слева (%d для целых чисел, %s для строк, %f/%g для чисел с плавающей запятой) и соответствующие значения в кортеже справа. Кортеж состоит из значений, разделенных запятыми, обычно заключенных в скобки. Например:\n\ntext = "%d little pigs come out, or I'll %s, and I'll %s, and I'll blow your %s down." % (3, 'huff', 'puff', 'house')\n\nВ этом примере оператор % используется для вставки значений в строку формата. Значения передаются в виде кортежа (3, 'huff', 'puff', 'house'), и оператор % заменяет соответствующие спецификаторы формата значениями из кортежа.",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Как использовать оператор % для создания многострочных строк в Python?",
"answer": "Если вы хотите разбить длинную строку на несколько строк при использовании оператора %, вам потребуется использовать скобки для объединения всего выражения. Например:\n\ntext = (\n "%d little pigs come out, "\n "or I'll %s, and I'll %s, "\n "and I'll blow your %s down."\n) % (3, 'huff', 'puff', 'house')\n\nВ этом примере использованы скобки, чтобы выражение могло занимать несколько строк. Каждая часть строки разделена запятой и помещена в отдельные кавычки. Python автоматически объединит эти строки в одну длинную строку.",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Чем отличаются строки в Python: Unicode и bytes?",
"answer": "Строки в Python могут быть представлены двумя типами: Unicode и bytes. Unicode-строки представляют символы Юникода и обозначаются обычными строками без префиксов. Например:\n\nustring = 'A unicode \u018e string \xf1'\n\nБайтовые строки (bytes) представляют простые байты и обозначаются с помощью префикса 'b' перед строковым литералом. Например:\n\nbyte_string = b'A byte string'\n\nДля преобразования обычной Unicode-строки в bytes-строку можно использовать метод encode(). Для обратного преобразования bytes-строки в Unicode-строку используется метод decode().\n\nustring = 'A unicode \u018e string \xf1'\nb = ustring.encode('utf-8')\nt = b.decode('utf-8')\n\nВ приведенном примере строка 'ustring' преобразуется в bytes-строку 'b' с помощью кодировки utf-8. Затем bytes-строка 'b' преобразуется обратно в Unicode-строку 't' с помощью декодирования utf-8.",
"difficulty": "2",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Какие значения считаются ложными (False) в условных выражениях в Python?",
"answer": "В условных выражениях в Python считаются ложными следующие значения:\n\n- None\n- 0 (целое число)\n- Пустая строка ('')\n- Пустой список ([])\n- Пустой словарь ({})\n\nВ дополнение к этому, в Python существует логический тип данных bool, который имеет два значения: True (истина) и False (ложь). Логический тип bool может быть преобразован в целое число, где True равно 1, а False равно 0.",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Какие операции сравнения можно использовать в условных выражениях в Python?",
"answer": "В Python можно использовать следующие операции сравнения в условных выражениях:\n\n- Равно (==)\n- Не равно (!=)\n- Меньше (<)\n- Меньше или равно (<=)\n- Больше (>)\n- Больше или равно (>=)\n\nОператор == используется для проверки равенства двух значений, включая строки. Оператор != используется для проверки неравенства. Остальные операторы сравнения (<, <=, >, >=) используются для сравнения числовых значений. Операции сравнения возвращают логическое значение True или False в зависимости от результата сравнения.",
"difficulty": "1",
"memory": "0"
},
{
"date": "14.06.2023",
"question": "Какие логические операторы можно использовать в условных выражениях в Python?",
"answer": "В Python можно использовать следующие логические операторы в условных выражениях:\n\n- И (and): Возвращает True, если оба операнда являются истинными.\n- Или (or): Возвращает True, если хотя бы один операнд является истинным.\n- Не (not): Возвращает True, если операнд является ложным.\n\nЛогические операторы могут комбинироваться для создания сложных условий. Например:\n\nx = 5\ny = 10\n\nif x > 0 and y > 0:\n print('Both x and y are positive')\n\nВ этом примере условие проверяет, являются ли и x, и y положительными числами, и выводит соответствующее сообщение.",
"difficulty": "1",
"memory": "0"
},


]
