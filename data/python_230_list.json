[
    {
        "date": "14.06.2023",
        "question": "Что такое список (list) в Python?",
        "answer": "Список (list) в Python - это упорядоченнаялекция элементов, которые могут быть разных типов данных. Элементы списка могут быть изменены, а сам список может содержать любое количество элементов.",
        "difficulty": "1",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как создать список в Python?",
        "answer": "Для создания списка в Python нужно заключить элементы списка в квадратные скобки и разделить их запятыми. Например, my_list = [1, 'two', 3.0].",
        "difficulty": "1",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как получить элемент списка по индексу в Python?",
        "answer": "Для получения элемента списка по индексу в Python нужно указать индекс элемента в квадратных скобках после имени списка. Индексация начинается с 0. Например, my_list[0] вернет первый элемент списка.",
        "difficulty": "1",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как добавить элемент в конец списка в Python?",
        "answer": "Для добавления элемента в конец списка в Python можно использовать метод append(). Например, my_list.append('four') добавит элемент 'four' в конец списка.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как удалить элемент из списка в Python?",
        "answer": "Для удаления элемента из списка в Python можно использовать метод remove(). Например, my_list.remove('two') удалит элемент 'two' из списка. Если элементов с таким значением несколько, будет удален первый найденный элемент.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как получить последний элемент списка в Python?",
        "answer": "Для получения последнего элемента списка в Python можно использовать отрицательный инекс -1. Например, my_list[-1] вернет последний элемент списка.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как получить подсписок (срез) списка в Python?",
        "answer": "Для получения подсписка (среза) списка в Python нужно указать начальный и конный индексы в квадратных скобках после имени списка, разделенные двоеточием. Например, my_list[1:3] вернет подсписок, начиная со второго элемента и заканчивая третьим элементом (не включая его).",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как изменить элемент списка по индексу в Python?",
        "answer": "Для изменения элемента списка по индексу в Python нужно указать индекс элемента в квадратных скобках после имени списка и присвоить ему новое значение. Например, my_list[1] = 'new_value' заменит второй элемент списка на 'new_value'.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как скопировать список в Python?",
        "answer": "Для копирования списка в можно использовать метод copy(). Например, my_list_copy = my_list.copy() создаст копию списка my_list.",
        "difficulty": "3",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как объединить два списка в Python?",
        "answer": "Для объединения двух списков в Python можно использовать оператор + (плюс). Например, my_list = [1, 2] + [3, 4] создаст список [1, 2, 3, 4].",
        "difficulty": "3",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как добавить элемент в список по индексу в Python?",
        "answer": "Для добавления элемента в список по инду в Python можно использовать метод insert(). Например, my_list.insert(1, 'new_value') добавит элемент 'new_value' на вторую позицию списка.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как удалить элемент из списка по индексу в Python?",
        "answer": "Для удаления элемента списка по индексу в Python можно использовать оператор del. Например, del my_list[1] удалит второй элемент списка.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как удалить все элементы списка в Python?",
        "answer": "Для удаления всех элементов списка в Python можно использовать метод clear(). Например, my_list.clear() удалит все элементы списка.",
        "difficulty": "3",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как отсортировать список в Python?",
        "answer": "Для сортировки списка в Python можно использовать метод sort(). Например, my_list.sort() отсортирует список по возрастанию. Для сортировки по убыванию нужно указать аргумент reverse=True: my_list.sort(reverse=True).",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как развернуть список в Python?",
        "answer": "Для разворота списка в Python можно использовать метод reverse(). Например, my_list.reverse() развернет список в обратном порядке.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как объединить два списка в Python?",
        "answer": "Для объединения двух списков в Python можно использовать оператор + (плюс). Например, my_list = [1, 2] + [3, 4] создаст список [1, 2, 3, 4].",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14..2023",
        "question": "Как добавить элементы другого списка в конец списка в Python?",
        "answer": "Для добавления элементов другого списка в конец списка в Python можно использовать метод extend(). Например, my_list.extend([3, 4]) добавит элементы [3, 4] в конец списка.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как создать список заданной длины в Python?",
        "answer": "Для создания списка заданной длины в Python можно использовать метод * (умножение). Например, my_list = [0] * 5 создаст список [0, 0, 0, 0, 0] длиной 5 элементов.",
        "difficulty": "3",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как создать список чисел в заданном диапазоне в Python?",
        "answer": "Для создания списка чисел в заданном диапазоне в Python можно использовать функцию range(). Например, my_list = list(range(1, 6)) создаст список [1, 2, 3, 4, 5].",
        "difficulty": "3",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как создать список из строки в Python?",
        "answer": "Для создания списка из строки в Python можно использовать метод split(). Например, my_list = '1 2 3'.split() создаст список ['1', '2', '3'].",
        "difficulty": "3",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как удалить первый элемент с определенным значением из списка в Python?",
        "answer": "Для удаления первого элемента с определенным значем из списка в Python можно использовать метод remove(). Например, my_list.remove(3) удалит первый элемент со значением 3 из списка.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как удалить все элементы с определенным значением из списка в Python?",
        "answer": "Для удаления всех элементов с определенным значением из списка в Python можно использовать цикл while и метод remove(). Например, while 3 in my_list: my_list.remove(3) удалит все элементы со значением 3 из списка.",
        "difficulty": "3",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как скопировать список в Python?",
        "answer": "Для копирования списка в Python можно использовать метод copy() или оператор [:]. Например, my_list_copy = my.copy() или my_list_copy = my_list[:] создадут копию списка my_list.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как проверить, содержится ли элемент в списке в Python?",
        "answer": "Для проверки, содержится ли элемент в списке в Python, можно использов оператор in. Например, if 3 in my_list: выполнит блок кода, если список my_list содержит элемент со значением 3.",
        "difficulty": "1",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как получить индекс элемента в списке в Python?",
        "answer": "Для получения индекса элемента в списке в Python можно использовать метод index(). Например, my_list.index(3) вернет индекс первого элемента со значением 3 в списке.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как перебрать все элементы списка в Python?",
        "answer": "Для перебора всех элементов в Python можно использовать цикл for. Например, for x in my_list: выполнит блок кода для каждого элемента списка my_list.",
        "difficulty": "1",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как получить индекс элемента и его значение при переборе списка в Python?",
        "answer": "Для получения индекса элемента и его при переборе списка в Python можно использовать функцию enumerate(). Например, for i, x in enumerate(my_list): выполнит блок кода для каждого элемента списка my_list, где i - индекс элемента, x - значение элемента.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как перебрать все индексы списка в Python?",
        "answer": "Для перебора всех индексов списка в Python можно использовать функцию range() вместе с функцией len(). Например, for i in range(len(my_list)): выполнит блок кода для каждого индекса списка my_list.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как перебрать все элементы списка в обратном порядке в Python?",
        "answer": "Для перебора всех элементов списка в обратном порядке в Python можно использовать метод reversed(). Например, for x in reversed(my_list): выполнит блок кода для каждого элемента списка my_list в обратном порядке.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как перебрать все элементы списка с определенного индекса в Python?",
        "answer": "Для перебора всех элементов списка с определенного индекса в Python можно использовать срезы (slices). Например, for x in my_list[2:]: выполнит блок кода для каждого элемента списка my_list, начиная с третьего элемента.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Что такое генератор списков (list comprehension) в Python?",
        "answer": "Генератор списков (list comprehension) в Python это способ создания нового списка на основе существующего списка с помощью одной строки кода. Он позволяет создавать новый список, применяя выражение к каждому элементу существующего списка. Например, new_list = [x*2 for x in my_list] создаст новый список new_list, в котором каждый элемент будет удвоенным элементом из списка my_list.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как создать новый список на основе существующего списка с помощью генератора списков в Python?",
        "answer": "Для создания нового списка на основе существующего списка с помощью генератора списков в Python нужноать синтаксис [выражение for элемент in список]. Например, new_list = [x*2 for x in my_list] создаст новый список new_list, в котором каждый элемент будет удвоенным элементом из списка my_list.",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как создать новый список на основе существующего списка с помощью генератора списков в Python с условием?",
        "answer": "Для создания нового списка на основе существующего списка с помощью генератора списков в Python с условием нужно использовать синтаксис [выражение for элемент in список if условие]. Например, new_list = [x*2 for x in my_list if x > 2] создаст новый список new_list, в котором каждый элемент будет удвоенным элементом из списка my_list, если элемент больше .",
        "difficulty": "3",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как создать новый список на основе двух существующих списков с помощью генератора списков в Python?",
        "answer": "Для создания нового списка на основе двух существующих списков с помощью генератора списков в Python нужно использовать синтаксис [выражение for элемент1 in список1 for элемент2 in список2]. Например, new_list = [x*y for x in my_list1 for y in my_list2] создаст новый список new_list, в котором каждый элемент будет произведением элементов из списков my_list1 и my_list2.",
        "difficulty": "3",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как создать новый список на основе существующего списка с помощью генератора списков в Python с использованием функции?",
        "answer": "Для создания нового списка на основе существующего списка с помощью генератора списков в Python с использованием функции нужно использовать синтаксис [функция(выражение) for элемент in список]. Например, new_list = [len(x) for x in my_list] создаст новый список new_list, в котором каждый элемент будет длиной элемента из списка my_list.",
        "difficulty": "3",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как создать копию списка в Python?",
        "answer": "Для создания копии списка в Python можно использовать copy() или функцию list(). Например, для создания копии списка my_list можно использовать следующий код: \n\nnew_list = my_list.copy() \nили \nnew_list = list(my_list)",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как создать поверхностную копию списка в Python?",
        "answer": "Для созданияерхностной копии списка в Python можно использовать срез списка. Например, для создания поверхностной копии списка my_list можно использовать следующий код: \n\nnew_list = my_list[:] ",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как создать глубокую копию списка в Python?",
        "answer": "Для создания глубокой копии списка в Python можно использовать модуль copy и его метод deepcopy(). Например, для создания глубокой копии списка my_list можно использовать следующий код: \n\nimport copy \nnew_list = copy.deepcopy(my_list)",
        "difficulty": "3",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как объединить элементы списка в строку в Python?",
        "answer": "Для объединения элементов списка в строку в Python можно использовать метод join(). Например, для объединения элементов списка my_list в строку с разделителем '-' можно использовать следующий код: \n\nmy_string = '-'.join(my_list)",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как объединить элементы списка в строку без разделит в Python?",
        "answer": "Для объединения элементов списка в строку без разделителя в Python можно использовать метод join() с пустой строкой в качестведелителя. Например, для объединения элементов списка my_list в строку без разделителя можно использовать следующий код: \n\nmy_string = ''.join(my)",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как добавить элемент в конец списка в Python?",
        "answer": "Для добавления элемента в конец списка в Python использовать метод append(). Например, для добавления элемента 'apple' в конец списка my_list можно использовать следующий код: \n\nmy_list.append('apple')",
        "difficulty": "1",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как добавить элемент в список по индексу в Python?",
        "answer": "Для добавления элемента в список по индексу в Python можно использовать метод insert(). Например, для добавления элемента 'apple' в список my_list по индексу 1 можно использовать следующий код: \n\nmy_list.insert(1, 'apple')",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как удалить элемент из списка в Python?",
        "answer": "Для удаления элемента из списка в Python можно использовать метод remove(). Например, для удаления элемента 'apple' из списка my_list можно использовать следующий код: \n\nmy_list.remove('apple')",
        "difficulty": "1",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как удалить элемент из списка по индексу в Python?",
        "answer": "Для удаления элемента из списка по индексу в Python можно использовать оператор del. Например, для удаления элемента списка my_list по индексу 1 можно использовать следующий код: \n\ndel my_list[1]",
        "difficulty": "2",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как очистить список в Python?",
        "answer": "Для очистки списка в Python можно использовать метод clear(). Например, для очистки списка my_list можно использовать следующий код: \n\nmy_list.clear()",
        "difficulty": "1",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Какой паттерн используется для построения списка в Python?",
        "answer": "Один распространенный паттерн - начать список как пустой список [], а затем использовать методы append() или extend() для добавления элементов в него. Например:\n\nlist = []\nlist.append('a')\nlist.append('b')\n\nТеперь список будет содержать элементы 'a' и 'b'.",
        "difficulty": "1",
        "memory": "0"
    },
    {
        "date": "14.06.2023",
        "question": "Как использовать срезы (slices) для работы со списками в Python?",
        "answer": "Срезы работают со списками так же, как и со строками, и могут использоваться для изменения подчастей списка. Например:\n\nlist = ['a', 'b', 'c', 'd']\nprint(list[1:-1]) ## ['b', 'c']\n\nС помощью среза мы получаем подсписок, содержащий элементы со второго по предпоследний. Далее, мы можем изменить подчасть списка, используя срез:\n\nlist[0:2] = 'z' ## заменяем ['a', 'b'] на ['z']\nprint(list) ## ['z', 'c', 'd']",
        "difficulty": "2",
        "memory": "0"
    }
]
