Приложение написано на python, PyQt5

Главное окно приложения:
- размер 1366 х 768;
- заголовок "Zofamin";
- содержит Основное меню
- содержит Таблицу, которая находится под основным меню, размер Таблицы - "резиновый", всегда растянута на максимальную доступную ширину и высоту окна.

Основное меню содержит:
* Файл
- -  Открыть
- - Выход
* Обучение
- -  Начать
- -  Добавить вопрос
- -  Редактировать вопрос
- -  Удалить вопрос

Таблица содержит следующие колонки:
* Название колонки "Вопрос" - занимает 50% от свободного места в ширину
* Название колонки "Ответ" - занимает 50% от свободного места в ширину

К слотам меню подключены действия. Каждое действие связано с соответствующим методом (например, open_file, start_training, add_question, edit_question, delete_question), который в настоящее время просто выводит соответствующее сообщение в консоль.

Слот меню "выход" - закрывает приложение.

Как опытный python разработчик внимательно прочитай это задание и напиши код.


utf-8
ensure_ascii=False





Внимательно прочитай и запомни код:
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidget, QAction, QVBoxLayout, QWidget, QHeaderView

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Zofamin")
        self.resize(1366, 768)

        self.table = QTableWidget()
        self.table.setColumnCount(2)
        self.table.setHorizontalHeaderLabels(["Вопрос", "Ответ"])
        self.table.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)  # Задаем растягивание колонки "Вопрос"
        self.table.horizontalHeader().setStretchLastSection(True)

        self.create_actions()
        self.create_menus()

        central_widget = QWidget()
        main_layout = QVBoxLayout()
        main_layout.addWidget(self.table)
        central_widget.setLayout(main_layout)
        self.setCentralWidget(central_widget)

    def create_actions(self):
        self.open_action = QAction("Открыть", self)
        self.open_action.triggered.connect(self.open_file)

        self.exit_action = QAction("Выход", self)
        self.exit_action.triggered.connect(self.close)

        self.start_action = QAction("Начать", self)
        self.start_action.triggered.connect(self.start_training)

        self.add_action = QAction("Добавить вопрос", self)
        self.add_action.triggered.connect(self.add_question)

        self.edit_action = QAction("Редактировать вопрос", self)
        self.edit_action.triggered.connect(self.edit_question)

        self.delete_action = QAction("Удалить вопрос", self)
        self.delete_action.triggered.connect(self.delete_question)

    def create_menus(self):
        file_menu = self.menuBar().addMenu("Файл")
        file_menu.addAction(self.open_action)
        file_menu.addAction(self.exit_action)

        training_menu = self.menuBar().addMenu("Обучение")
        training_menu.addAction(self.start_action)
        training_menu.addAction(self.add_action)
        training_menu.addAction(self.edit_action)
        training_menu.addAction(self.delete_action)

    def open_file(self):
        print("Открыть файл")

    def start_training(self):
        print("Начать обучение")

    def add_question(self):
        print("Добавить вопрос")

    def edit_question(self):
        print("Редактировать вопрос")

    def delete_question(self):
        print("Удалить вопрос")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())


Необходимо дописать функцию open_file(), чтобы она делала следующее:
- открывала диалоговое окно для выбора пользователем файла типа json в папке data
- проверяла выбранный пользователем файл на наличие у объектов json полей "question" и "answer", если этих полей нет, то выводим ошибку: "файл не соответствует требованиям", если эти поля есть, то считываем файл в память приложения в "data" и выводим данные в таблицу на главном экране, которая была создана в app.py

Передай мне код только для open_file()


