import tkinter as tk
from tkinter import ttk, filedialog
import json
from utils import add_question, edit_question, delete_question, start_training

class Application(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Zofamin: Total Memorization üß†")
        self.geometry("1366x768")
        self.create_widgets()
        self.data = []  # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

    def create_widgets(self):
        self.menu = tk.Menu(self)

        file_menu = tk.Menu(self.menu, tearoff=0)
        file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å", command=self.open_file)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_file)
        file_menu.add_command(label="–ó–∞–∫—Ä—ã—Ç—å", command=self.close_file)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã–π—Ç–∏", command=self.quit)
        self.menu.add_cascade(label="–§–∞–π–ª", menu=file_menu)

        questions_menu = tk.Menu(self.menu, tearoff=0)
        questions_menu.add_command(label="–î–æ–±–∞–≤–∏—Ç—å", command=add_question)
        questions_menu.add_command(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=edit_question)
        questions_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=lambda: delete_question(self))
        self.menu.add_cascade(label="–í–æ–ø—Ä–æ—Å—ã", menu=questions_menu)

        training_menu = tk.Menu(self.menu, tearoff=0)
        training_menu.add_command(label="–ù–∞—á–∞—Ç—å", command=start_training)
        self.menu.add_cascade(label="–û–±—É—á–µ–Ω–∏–µ", menu=training_menu)

        self.config(menu=self.menu)

        self.table_frame = tk.Frame(self)
        self.table_frame.pack(fill="both", expand=True)

        self.table = ttk.Treeview(self.table_frame, columns=("number", "date", "question", "answer", "difficulty", "memory"),
                                  show="headings", selectmode="browse")
        self.table.column("number", width=20)
        self.table.column("date", width=50)
        self.table.column("question", minwidth=100)
        self.table.column("answer", minwidth=100)
        self.table.column("difficulty", width=50)
        self.table.column("memory", width=50)

        self.table.heading("number", text="‚Ññ")
        self.table.heading("date", text="–î–∞—Ç–∞")
        self.table.heading("question", text="–í–æ–ø—Ä–æ—Å")
        self.table.heading("answer", text="–û—Ç–≤–µ—Ç")
        self.table.heading("difficulty", text="–°–ª–æ–∂–Ω–æ—Å—Ç—å")
        self.table.heading("memory", text="–ó–∞—É—á")

        self.table.pack(fill="both", expand=True)

    def open_file(self):
        filetypes = [("JSON files", "*.json")]
        filepath = filedialog.askopenfilename(initialdir="data", title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", filetypes=filetypes)

        if filepath:
            with open(filepath, "r", encoding="utf-8") as file:
                try:
                    self.data = json.load(file)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–ª–∞—Å—Å–∞
                    required_fields = ["date", "question", "answer", "difficulty", "memory"]

                    if all(field in self.data[0] for field in required_fields):
                        self.display_data()
                    else:
                        print("–î–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")

                except json.JSONDecodeError:
                    print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ JSON")

    def display_data(self):
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.table.delete(*self.table.get_children())

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∫–ª–∞—Å—Å–∞
        for i, item in enumerate(self.data):
            number = i + 1
            date = item["date"]
            question = item["question"]
            answer = item["answer"]
            difficulty = item["difficulty"]
            memory = item["memory"]

            self.table.insert("", "end", values=(number, date, question, answer, difficulty, memory))

    def save_file(self):
        if not self.data:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        filetypes = [("JSON files", "*.json")]
        filepath = filedialog.asksaveasfilename(initialdir="data", title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", filetypes=filetypes)

        if filepath:
            with open(filepath, "w", encoding="utf-8") as file:
                json.dump(self.data, file, indent=4, ensure_ascii=False)
                print("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

    def close_file(self):
        self.data = []  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.table.delete(*self.table.get_children())  # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        print("–§–∞–π–ª –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    app = Application()
    app.mainloop()
